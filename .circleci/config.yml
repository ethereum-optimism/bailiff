version: '2.1'
orbs:
  go: circleci/go@1.12.0
  gcp-cli: circleci/gcp-cli@3.0.1

commands:
  gcp-oidc-authenticate:
    description: "Authenticate with GCP using a CircleCI OIDC token."
    parameters:
      project_id:
        type: env_var_name
        default: GCP_PROJECT_ID
      workload_identity_pool_id:
        type: env_var_name
        default: GCP_WIP_ID
      workload_identity_pool_provider_id:
        type: env_var_name
        default: GCP_WIP_PROVIDER_ID
      service_account_email:
        type: env_var_name
        default: GCP_SERVICE_ACCOUNT_EMAIL
      gcp_cred_config_file_path:
        type: string
        default: /home/circleci/gcp_cred_config.json
      oidc_token_file_path:
        type: string
        default: /home/circleci/oidc_token.json
    steps:
      - run:
          name: "Create OIDC credential configuration"
          command: |
            # Store OIDC token in temp file
            echo $CIRCLE_OIDC_TOKEN > << parameters.oidc_token_file_path >>
            # Create a credential configuration for the generated OIDC ID Token
            gcloud iam workload-identity-pools create-cred-config \
                "projects/${<< parameters.project_id >>}/locations/global/workloadIdentityPools/${<< parameters.workload_identity_pool_id >>}/providers/${<< parameters.workload_identity_pool_provider_id >>}"\
                --output-file="<< parameters.gcp_cred_config_file_path >>" \
                --service-account="${<< parameters.service_account_email >>}" \
                --credential-source-file=<< parameters.oidc_token_file_path >>
      - run:
          name: "Authenticate with GCP using OIDC"
          command: |
            # Configure gcloud to leverage the generated credential configuration
            gcloud auth login --brief --cred-file "<< parameters.gcp_cred_config_file_path >>"
            # Configure ADC
            echo "export GOOGLE_APPLICATION_CREDENTIALS='<< parameters.gcp_cred_config_file_path >>'" | tee -a "$BASH_ENV"

jobs:
  build:
    executor:
      name: go/default
      tag: '1.23.2'
    steps:
      - checkout
      - run:
          name: Check mod tidy
          command: |
            go mod tidy
            git diff --quiet --exit-code
      - go/test:
          covermode: atomic
          no_output_timeout: 15m
          race: true
          timeout: 15m
          verbose: true

  release:
    executor:
      name: go/default
      tag: '1.23.2'
    steps:
      - gcp-cli/install
      - gcp-oidc-authenticate
      - run:
          name: Configure Docker
          command: |
            gcloud auth configure-docker us-docker.pkg.dev
      - go/install-goreleaser
      - checkout
      - go/goreleaser-release:
          project-path: .
          publish-release: true
          validate-yaml: true

workflows:
  main:
    jobs:
      - build

  release:
    jobs:
      - release:
          filters:
            tags:
              only: /^v[0-9]+(.*)/
            branches:
              ignore: /.*/
          context:
            - oplabs-gcr-release